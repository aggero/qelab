#!/bin/bash
####
## Bash script builder for qemotes
##
##   https://github.com/aggero/qemotes
##   LIC: GNU GPLv3
##
####

####
## Notes
##
##   Script will attempt cleanup on error
##     of partially built project
##
##   Script will create a folder for new
##     projects, default name: <date>-<word>
##
####

## Script resources
dirMachines="machines/"
dirWorkspace="projects/"
dirProject="" # generated by script
strDC="docker-compose.yml"
verDC="3"

## Ease-of-use for this script
clear
cleanup() { echo ""; exit 1; }

this=$(basename $BASH_SOURCE)
err() { printf "%s\n" "$*" >&2; cleanup; }
out() {
	if [ -z "$q" ]; then
		printf "\t%s\n" "$*"
	fi
}

trap ctr_c INT
ctrl_c() {
	echo -e "\t-~<| !! Trapped CTRL-C !! |>~"
	cleanup
}

## Parse Inputs
proj=""
quiet=""
overwrite=""
declare -a mList
declare -a mID
declare -a cTarg
declare -a cList

usage() {
	echo -e "\nUsage: $this [options] <machine[s]>\n"

	echo -e "\t--usage"
	echo -e "\t    outputs this message\n"

	echo -e "\t--quiet|-q"
	echo -e "\t    suppresses output except for errors\n"

	echo -e "\t--overwrite|-o"
	echo -e "\t    overwrite prior project if it exists\n"

	echo -e "\t--project|-p"
	echo -e "\t    project name specified used for directory\n"

	echo -e "\t--cmd|-c <mid>='<command script>'"
	echo -e "\t    run script on specific machine referenced by ID"
	echo -e "\t    machine ID created by order of machine list\n"

	echo -e "\t--machines|-m"
	echo -e "\t    list supported machines; see folder:"
	echo -e "\t      $dirMachines"

	cleanup
}

## Scrub user input
scrubPrintable() {
	clean="$1"
	clean=${clean//[^[:print:]]/}
	echo $clean
}

scrubNumeric() {
	clean="$1"
	clean=${clean//[^[:digit:]]/}

	echo $clean
}

## Tokens for project names
cTok=('k', 's', 't', 'n', 'h', 'm', 'y', 'r', 'g', 'z', 'd', 'b', 'p')
vTok=('a', 'i', 'u', 'e', 'o')

genProjectName() {
	declare -a c
	declare -a v
	c[0]=${cTok[$RANDOM % ${#cTok[@]}]}
	c[1]=${cTok[$RANDOM % ${#cTok[@]}]}
	c[2]=${cTok[$RANDOM % ${#cTok[@]}]}
	v[0]=${vTok[$RANDOM % ${#vTok[@]}]}
	v[1]=${vTok[$RANDOM % ${#vTok[@]}]}
	v[2]=${vTok[$RANDOM % ${#vTok[@]}]}
	d=$(date +'%y%m%d')
	n=$(echo "${c[0]}${v[0]}${c[1]}${v[1]}${c[2]}${v[2]}" | sed 's/,//g')
	echo ${d}_${n}
}

while [ ! -z "$1" ]; do
	case "$1" in
		# usage
		--usage|-u)
			usage
		;;

		# quiet output
		--quiet|-q)
			quiet="true"
		;;

		# overwrite project
		--overwrite|-o)
			overwrite="true"
		;;

		# project name
		--project|-p)
			proj="$2"
			shift
		;;

		# commands
		--cmd|-c)
			targ=$(echo "$2" | cut -d '=' -f 1)
			list=$(echo "$2" | cut -d '=' -f 2)
			if [ -z "$targ" ]; then
				err "Invalid command target ID"
			fi
			if [ -z "$list" ]; then
				err "Invalid command"
			fi
			cTarg+=("$targ")
			cList+=("$list")
			shift
		;;

		# list machines
		--machines|-m)
			echo "Supported machines:"
			for fn in $(echo "$dirMachines*"); do
				echo -e "\t$(basename $fn)"
			done
			cleanup
		;;

		# machines
		*)
			aMachine="$1"
			if [ -f $(echo "$dirMachines$aMachine") ]; then
				mList+=("$aMachine")
			else
				err "Unsupported machine. Try --machines for list of supported machines."
			fi
		;;
	esac

	shift
done

## Apply defaults
if [ -z "$proj" ]; then
	proj=$(genProjectName)
	dirProject="$dirWorkspace$proj/"
else
	dirProject="$dirWorkspace$proj/"
fi

## Check inputs
if [ ${#mList[@]} -eq 0 ]; then
	err "No machines defined. Try --machines for list of supported machines."
fi

if [ -d "$dirProject" ]; then
	if [ "$overwrite" == "true" ]; then
		rm -R "$dirProject*"
		rmdir "$dirProject"
	else
		err "Project already exists. Use --overwrite to replace."
	fi
fi

## Setup environment
if [ ! -d "$dirWorkspace" ]; then
	echo "Did not find workspace. Creating $dirWorkspace."
	mkdir -p "$dirWorkspace"
fi
echo "Creating project: $proj"
mkdir "$dirProject"
echo "Machines (${#mList[@]}):"
for i in "${!mList[@]}"
do
	mID+=("$(expr 80 + $i)")

	echo -e "\t${mList[$i]}"
	for j in "${!cTarg[@]}"
	do
		echo -e "\tCMD:\t${cList[$j]}"
	done
done

## Write Compose File
dc="$dirProject$strDC"
echo "version: \"$verDC\"" > "$dc"
echo "services:" >> "$dc"

for i in "${!mList[@]}"
do
	locDir="$dirProject${mList[$i]}_${mID[$i]}/"
	mkdir "$locDir"

	m="${mList[$i]}"
	id=$(expr 80 + "$i")
	## Write Machine to Compose
	cat "$dirMachines${mList[$i]}" \
	  | sed "s/!M/$m/g" \
	  | sed "s/!ID/$id/g" >> "$dc"
done

## Build connect script for each machine
for i in "${!mList[@]}"
do
	m="${mList[$i]}"
	id=$(expr 80 + "$i")

	strSSH=$(cat "$dirMachines${mList[$i]}" | grep "#SSH" | sed 's/#SSH //g')
	strSSH=$(echo "$strSSH" | sed "s/!M/$m/g" | sed "s/!ID/$id/g")
	echo "$strSSH" > "$dirProject${mList[$i]}_${mID[$i]}.ssh"
	sudo chmod +x "$dirProject${mList[$i]}_${mID[$i]}.ssh"
done
